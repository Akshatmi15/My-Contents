pipeline {
    agent any
    triggers {
      pollSCM('* * * * *')
    }
    environment {
        def BRANCH_NAME = "${GIT_BRANCH.replaceFirst(/^.*\//, '')}"
        def COMMIT = "${GIT_COMMIT.substring(0,8)}"
        dockerImage = ''
    }
    stages {
        stage("Build Gradle") {
            steps {
                echo 'Gradle Build Started'
                sh 'chmod +x ./gradlew'
                sh './gradlew clean build --no-daemon' //run a gradle task
            }
        }
        stage("Code-Analysis") {
            parallel {
                stage('Quality Gate - Sonar') {
                    steps {
                        withSonarQubeEnv('sonarqube-okd') {
                            sh """                             
                            JAVA_HOME=/usr/java/amazoncorretto11
                            export PATH=/apps/tools/sonar-scanner-4.5.0/bin/:$PATH   
                            sonar-scanner -Dsonar.projectKey=$JOB_NAME-$BRANCH_NAME
                            """
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            //  waitForQualityGate abortPipeline: true
                            script{
                                def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                                if (qg.status != 'OK') {
                                    // error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                    currentBuild.result='UNSTABLE'
                                }
                            }
                        }
                    }
                    post {
                        always {
                            echo "I am running from always"
                        }
                        unstable {
                            echo "unstable"
                        }
                        success {
                            echo "success"
                        }
                        failure {
                            echo "failure"
                        }
                        changed {
                            echo "chnaged"
                        }
                    }
                }
            } 
        }      
        stage('Build Docker image') {
            steps {
                echo 'Starting to build docker image'
                script {
                    echo 'Bild Docker Image'
                    dockerImage = docker.build("national-record:${COMMIT}")
                }
            }
        }
        stage("Twistlock Image Scan") {
            steps {
                echo 'Twistlock Image Scan'
            }
        }
        stage("Push Image to OKD") {
            steps {
                echo 'Push Image to OKD'
            }
        }
        stage("Push Image to ECR") {
            steps {
                echo 'Push Image to ECR'
                script {
                    docker.withRegistry('https://857548234366.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:devops-jenkins-aws-secrets') {
                        dockerImage.push("$COMMIT")
                    }
                }
            }
        }
        // stage ('SAST - Dependency-Check') {
        //     steps {
        //         sh 'rm owasp || true'
        //         sh 'wget "https://github.cms.gov/raw/pecos-application-development/zap-proxy/OWASP/owasp-dependency-check.sh?token=AAABRWEL2AEM5PX74GMCMA3AIBJH6" '
        //         sh 'chmod +x owasp-dependency-check.sh'
        //         sh 'bash owasp-dependency-check.sh || true'
        //         sh 'cat /apps/jenkins/workspace/$JOB_NAME/report/dependency-check-report.xml || true'     
        //       }
        // }
        stage ("Dynamic Analysis - DAST with OWASP ZAP") {
            steps {
                sh "docker run -t 857548234366.dkr.ecr.us-east-1.amazonaws.com/zap-proxy:latest zap-baseline.py -t http://$JOB_NAME-staging.apps.pecos-staging.cpi.cmscloud.local/swagger-ui/ || true"
            }
        }
        stage("Deploy to EKS") {
            steps {
                echo 'Deploy to EKS Staging'
            }
        }
        stage('Smoke Test') {
            steps {
                git branch: '1.0.1',
                credentialsId: 'MYPB',
                url: 'https://github.cms.gov/pecos-application-development/pecos-test-automation.git'
                sh """ls -lat
                JAVA_HOME=/usr/java/amazoncorretto11
                chmod +x src/test/resources/Drivers/geckodriver
                export PATH=/apps/tools/apache-maven-3.6.3:$PATH
                #chmod -R 777 *
                export DISPLAY=:0.0
                mvn clean test -Denv_run=DEV -DExecution_env=local  -Ddriver=true -DtestNGFile=testng.xml -Daxe508=false -Dheadless=true  -Dcucumber.filter.tags="@smoke"
                #mvn clean test -Denv_run=DEV -DExecution_env=local  -Ddriver=true -DtestNGFile=testng.xml -Daxe508=false -Dheadless=true  -Dcucumber.filter.tags="@login"
                """
                sh 'chmod -R 777 *'
                dir('/root/workspace/Test-Automation/test-output/SparkReport') {
                    emailext attachmentsPattern: 'Spark.html',
                    from: 'PECOS2.0DevSecOpsCMTeam@cgifederal.com',
                    to: 'ananta.vaddiparti@cgifederal.com,sachutun@cgifederal.com,akshat.mishra@cgifederal.com',
                    body: "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}\n\nAttached are Unit and Smoke Test results",
                    subject: "Jenkins Build : Job ${env.JOB_NAME} Unit and Smoke Test results"
                }
            }
        }
        stage('Regression Test') {
            steps {
                git branch: '1.0.1',
                credentialsId: 'MYPB',
                url: 'https://github.cms.gov/pecos-application-development/pecos-test-automation.git'
                sh """ls -lat
                JAVA_HOME=/usr/java/amazoncorretto11
                chmod +x src/test/resources/Drivers/geckodriver
                export PATH=/apps/tools/apache-maven-3.6.3:$PATH
                #chmod -R 777 *
                export DISPLAY=:0.0
                mvn clean test -Denv_run=DEV -DExecution_env=local  -Ddriver=true -DtestNGFile=testng.xml -Daxe508=false -Dheadless=true  -Dcucumber.filter.tags="@regression"
                """
            }
        }
        stage('Checkout selenium testcases') {
            steps {
                git branch: '1.0.1',
                credentialsId: 'MYPB',
                url: 'https://github.cms.gov/pecos-application-development/pecos-test-automation.git'
                sh """ls -lat
                JAVA_HOME=/usr/java/amazoncorretto11
                chmod +x src/test/resources/Drivers/geckodriver
                export PATH=/apps/tools/apache-maven-3.6.3:$PATH
                #chmod -R 777 *
                export DISPLAY=:0.0
                mvn clean test -Denv_run=DEV -DExecution_env=local  -Ddriver=true -DtestNGFile=testng.xml -Daxe508=false -Dheadless=true  -Dcucumber.filter.tags="@apiSearch"
                """
            }
        }   
    }
    post { 
        always { 
            cleanWs()
        }
    }
}
