pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '7', artifactNumToKeepStr: '10', daysToKeepStr: '10'))
    }
    tools {
            maven 'maven_3_6_3'
            jdk 'java-11'
            gradle 'gradle_6_7'
        }
    environment {
        def BRANCH_NAME = "${GIT_BRANCH.replaceFirst(/^.*\//, '')}"
        def COMMIT = "${GIT_COMMIT.substring(0,8)}"
        def projectNameWithBranch = env.JOB_NAME.replace('/', '-')
        def projectFullName = env.JOB_NAME.substring(0, env.JOB_NAME.indexOf("/"));
        def projectName = projectFullName.substring(0, projectFullName.indexOf("-B"));
        sonarscanner = tool 'sonarscanner'
        dockerImage = ''
        def jenkins_error = ''
        def reportPath = "${WORKSPACE}/Reports"
        
    }
    stages {
        stage("Prepare Env") {
            steps {
                cleanWs()
                script{
                    checkout scm
                    def gitrep_url = sh(returnStdout: true, script: 'git config remote.origin.url').trim()
                    echo "Application Repo: $gitrep_url"
                    echo "Git Branch Name:$BRANCH_NAME"
                    echo "Git Commit ID:$GIT_COMMIT"
                    echo "Application Name With Branch:$projectNameWithBranch"
                    echo "Application:$projectName"
                    currentBuild.displayName = "$COMMIT-${env.BUILD_NUMBER}"
				}
            }
        }
        stage('Build Docker image') {
            steps {
                echo 'Docker Build Started'
                script {
                    echo 'Bild Docker Image'
                    dockerImage = docker.build("$projectName:${COMMIT}")
                }
            }
        }
        stage("Code-Analysis") {
            parallel {
                stage('Quality Gate - Sonar') {
                    steps {
                        withSonarQubeEnv('sonarqube-okd') {
                            sh """                             
                            export PATH=$sonarscanner/bin/:$PATH   
                            sonar-scanner -Dsonar.projectKey=EKS-Jenkins-$projectNameWithBranch
                            """
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            //  waitForQualityGate abortPipeline: true
                            script{
                                def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                                if (qg.status != 'OK') {
                                    // error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                    currentBuild.result='UNSTABLE'
                                }
                            }
                        }
                    }
                    post {
                        unstable {
                            echo "unstable"
                            script {
                                emailext body: "Jenkins Job: ${env.JOB_NAME} \nBuild Number: ${env.BUILD_NUMBER}\n Job Status: Unstable \n\n  For more info refer: \n Jenkins Build URL: ${env.BUILD_URL}\n SonarQube Scan Results URL: http://sonarqube.pecos-devops.cpi.cmscloud.local/dashboard?id=$JOB_NAME-$BRANCH_NAME",
                                from: 'DoNotReply_Pecos2DevSecOps@cgifederal.com',
                                to: 'PECOS2.0DevSecOpsCMTeam@cgifederal.com',
                                subject: "Jenkins: SonarQube Scan failed for ${env.JOB_NAME} "
                            }
                        }
                        success {
                            echo "success"
                        }
                        failure {
                            echo "failure"
                            
                        }
                        changed {
                            echo "chnaged"
                        }
                    }
                }
                stage ('OWASP-SAST Scan') {
                    steps {
                        echo 'OWASP-SAST Dependency Check Scan completed'	  
                    } 
                }      
                stage("Prisma-Cloud Image Scan") {
                   steps {
                       dir ('Reports') {
                        script {
                            try {
                                echo 'Twistlock - Docker Image Scan Started'
                                prismaCloudScanImage ca: '',
                                cert: '',
                                dockerAddress: 'unix:///var/run/docker.sock',
                                image: "$projectName:${COMMIT}",
                                key: '',
                                logLevel: 'info',
                                podmanPath: '',
                                project: '',
                                resultsFile: 'prisma-cloud-scan-results.json',
                                ignoreImageBuildTime:true
                                prismaCloudPublish resultsFilePattern: 'prisma-cloud-scan-results.json' 
                                
                            }
                            catch (err) {
                                echo "Twistlock error: ${err}"
                                jenkins_error = "Prisma Scan Failed"
                                currentBuild.result = 'FAILURE'
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                prismaCloudPublish resultsFilePattern: 'prisma-cloud-scan-results.json' 
                                sh "exit 1"
                                }
                            }  
                        }
                      }  
                    }     
                }   
            }
        }    
        
        stage("Push Image to ECR") {
            when {
                branch 'master'
            }
            steps {
                echo 'Push Image to ECR'
                script {
                    docker.withRegistry('https://857548234366.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:devops-jenkins-aws-secrets') {
                        dockerImage.push("$COMMIT")
                    }
                }
            }
        }
        stage("Deploy-Staging01") {
            when {
                branch 'master'
            }
            steps {
                build job: "${projectName}-Deploy-Staging01",
                parameters: [string(name: 'ImageVersion', value: "${COMMIT}")],
                wait: false
            }
        }
    }
 post { 
        always { 
            script{
              	echo 'Cleaning Docker Conatiners and Images'
                sh 'docker rmi $ecrRegistry/$projectName:${COMMIT}'
                sh "docker image prune -f"
                prismaCloudPublish resultsFilePattern: 'prisma-cloud-scan-results.json'
                
            }
        }
		 success {  
             echo 'This will run only if successful'  
         }  
         failure {
               
                sh 'chmod -R 777 *'
                dir("$reportPath") {
                emailext attachmentsPattern: 'prisma-cloud-scan-results.json',             
                from: 'DoNotReply_Pecos2DevSecOps@cgifederal.com',
                to: 'PECOS2.0DevSecOpsCMTeam@cgifederal.com',
                body: "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}\n\nAttached are Failed Test results",                    
                subject: "PRISMA SCAN FAILED : Job ${env.JOB_NAME} $jenkins_error"
            }
        }  
    }
}