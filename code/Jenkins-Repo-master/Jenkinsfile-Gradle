pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '7', artifactNumToKeepStr: '10', daysToKeepStr: '10'))
    }
    tools {
            maven 'maven_3_6_3'
            jdk 'java-11'
            gradle 'gradle_6_7'
            
        }
    environment {
        def BRANCH_NAME = "${GIT_BRANCH.replaceFirst(/^.*\//, '')}"
        def COMMIT = "${GIT_COMMIT.substring(0,8)}"
        def projectNameWithBranch = env.JOB_NAME.replace('/', '-')
        def projectFullName = env.JOB_NAME.substring(0, env.JOB_NAME.indexOf("/"));
        def projectName = projectFullName.substring(0, projectFullName.indexOf("-B"));
        sonarscanner = tool 'sonarscanner'
        def ecrRegistry = "857548234366.dkr.ecr.us-east-1.amazonaws.com"
        dockerImage = ''
        def jenkins_error = ''
        def reportPath = "${WORKSPACE}/Reports"
    }
    stages {
        stage("Prepare Env") {
            steps {
                cleanWs()
                script{
				checkout scm
                def gitrep_url = sh(returnStdout: true, script: 'git config remote.origin.url').trim()
                echo "Application Repo: $gitrep_url"
				echo "Git Branch Name:$BRANCH_NAME"
				echo "Git Commit ID:$GIT_COMMIT"
				echo "Application Name With Branch:$projectNameWithBranch"
				echo "Application:$projectName"
				currentBuild.displayName = "$COMMIT-${env.BUILD_NUMBER}"
				
                }
            }
        }
        stage("Build") {
            parallel{
                stage("Build Gradle"){
                    steps {
                        echo 'Gradle Build Started'
                        sh 'chmod +x ./gradlew'
                        sh './gradlew clean build --no-daemon' //run a gradle task
                    }
                }
                stage('Build Docker image') {
                    steps {
                        echo 'Docker Build Started'
                        script {
                            echo 'Bild Docker Image'
                            dockerImage = docker.build("$ecrRegistry/$projectName:${COMMIT}")
                        }
                    }
                }
            }
        }
        stage("Code-Analysis") {
            parallel {
                stage('Quality Gate - Sonar') {
                    steps {
                        withSonarQubeEnv('sonarqube-okd') {
                            sh """                             
                            export PATH=$sonarscanner/bin/:$PATH   
                            sonar-scanner -Dsonar.projectKey=EKS-Jenkins-$projectNameWithBranch
                            """
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            //  waitForQualityGate abortPipeline: true
                            script{
                                def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                                if (qg.status != 'OK') {
                                    // error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                    currentBuild.result='UNSTABLE'
                                }
                            }
                        }
                    }
                    post {
                        unstable {
                            echo "unstable"
                            script {
                                emailext body: "Jenkins Job: ${env.JOB_NAME} \nBuild Number: ${env.BUILD_NUMBER}\n Job Status: Unstable \n\n  For more info refer: \n Jenkins Build URL: ${env.BUILD_URL}\n SonarQube Scan Results URL: http://sonarqube.pecos-devops.cpi.cmscloud.local/dashboard?id=$JOB_NAME-$BRANCH_NAME",
                                from: 'DoNotReply_Pecos2DevSecOps@cgifederal.com',
                                to: 'PECOS2.0DevSecOpsCMTeam@cgifederal.com',
                                subject: "Jenkins: SonarQube Scan failed for ${env.JOB_NAME} "
                            }
                        }
                        success {
                            echo "success"
                        }
                        failure {
                            echo "failure"
                            
                        }
                        changed {
                            echo "chnaged"
                        }
                    }
                }
            stage ('OWASP Dependency-Check') {
                    steps {
                        dependencyCheck additionalArguments: '''	
                            --scan	.
                            --log ./Reports/dependency-check-report-scan.log
                            --exclude gradle/**
                            --out ./Reports
                            --format	ALL''', odcInstallation: 'dependency-check-6-1-1'
                }
                post {
                            unstable {
                                script {
                                    echo "OWASP Dependency-Check is Unstable"
                                    currentBuild.result='UNSTABLE'
                                }
                            }
                            failure {
                                script {
                                    echo "OWASP Dependency-Check is Failed"
                                    currentBuild.result='FAILD'
                                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    jenkins_error = "Dependency Check Scan Failed"
                                    sh "exit 1"
                                    }
                                }
                            }
                    }
                }
                stage("Prisma-Cloud Image Scan") {
                   steps {
                       dir ('Reports') {
                        script {
                            try {
                                echo 'Twistlock - Docker Image Scan Started'
                                prismaCloudScanImage ca: '',
                                cert: '',
                                dockerAddress: 'unix:///var/run/docker.sock',
                                image: "$ecrRegistry/$projectName:${COMMIT}",
                                key: '',
                                logLevel: 'info',
                                podmanPath: '',
                                project: '',
                                resultsFile: 'prisma-cloud-scan-results.json',
                                ignoreImageBuildTime:true
                                prismaCloudPublish resultsFilePattern: 'prisma-cloud-scan-results.json' 
                                
                            }
                            catch (err) {
                                echo "Twistlock error: ${err}"
                                jenkins_error = "Prisma Scan Failed"
                                currentBuild.result = 'FAILURE'
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                prismaCloudPublish resultsFilePattern: 'prisma-cloud-scan-results.json' 
                                sh "exit 1"
                                }
                            }  
                        }
                      }  
                    }     
                }
                
            }
        }

        stage("Verify ECR Repo") {
            when {
                expression { currentBuild.result = 'SUCCESS' }
            }
            steps {
                
                script {
                    
                    sh '''
                    set +x
                        echo ""
                        echo "--Starting $projectName ECR Repository verification check..."
                        verifyRepo=$(aws ecr describe-repositories --repository-names $projectName --region us-east-1 2>&1)
                        if [ $? -ne 0 ]; then
                              if echo ${verifyRepo} | grep -q RepositoryNotFoundException; then
                                   aws ecr create-repository --repository-name $projectName --image-tag-mutability IMMUTABLE --image-scanning-configuration scanOnPush=true --region us-east-1
                                   echo "$projectName repo created in ECR and Enabled IMMITABLE / ScanOnPush settings"
                                 fi
                         else
                           echo "$projectName repository already exist in ECR"
                           echo "---End Of Repository Status check ---"
                           echo ""
                        fi
                        '''
                }
            }
        }
            
        stage("Push Image to ECR") {
            when {
                expression { currentBuild.result = 'SUCCESS' }
            }
            steps {
                script {
                    docker.withRegistry('https://857548234366.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:devops-jenkins-aws-secrets') {
                    sh '''
                       set +x
                       verifyImage() {
                            verifyTag=$(aws ecr describe-images --repository-name=$projectName --image-ids=imageTag=$COMMIT --region us-east-1 2>&1)
                                if [ $? -ne 0 ]; then
                                  if echo ${verifyTag} | grep -q ImageNotFoundException; then
                                       return 1
                                     fi
                                 else
                                   return 0
                                fi
                                }
                                if verifyImage  $projectName $COMMIT;
                                then
                                   echo "$COMMIT already exist in $projectName repo and skipping ECR Publish process"
                                   echo "---End of ECR Image push status---"
                                   echo ""
                                   
                                  
                                else
                                   echo "Updating docker Image:$projectName with Tag:$COMMIT"
                                   docker push $ecrRegistry/$projectName:$COMMIT
                                   echo "---End of ECR Image push status---"
                                   echo ""
                                 fi
                               '''
                            }
                    }
               }
            }
        stage("Deploy to Staging01 Env") {
            when {
                expression { currentBuild.result = 'SUCCESS' }
            }
            steps {
                build job: "${projectName}-Deploy-Staging01",
                parameters: [string(name: 'ImageVersion', value: "${COMMIT}")],
                wait: false
            }
        }
    }
        post { 
        always { 
            script{
              	echo 'Cleaning Docker Conatiners and Images'
                sh 'docker rmi $ecrRegistry/$projectName:${COMMIT}'
                prismaCloudPublish resultsFilePattern: 'prisma-cloud-scan-results.json'
                dependencyCheckPublisher failedNewCritical: 1, failedNewHigh: 1, failedNewMedium: 1, failedTotalCritical: 1, failedTotalHigh: 1, failedTotalMedium: 1, pattern: '', unstableNewLow: 0, unstableTotalLow: 0
                
            }
        }
		 success {  
             echo 'This will run only if successful'  
         }  
         failure {
               
                sh 'chmod -R 777 *'
                dir("$reportPath") {
                emailext attachmentsPattern: 'prisma-cloud-scan-results.json',             
                from: 'DoNotReply_Pecos2DevSecOps@cgifederal.com',
                to: 'PECOS2.0DevSecOpsCMTeam@cgifederal.com',
                body: "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}\n\nAttached are Failed Test results",                    
                subject: "PRISMA SCAN FAILED : Job ${env.JOB_NAME} $jenkins_error"
            }
        }  
    }
}
