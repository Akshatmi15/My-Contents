pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '7', artifactNumToKeepStr: '10', daysToKeepStr: '10'))
    }
    tools {
        maven 'maven_3_6_3'
        jdk 'java-11'
        gradle 'gradle_6_7'
    }
    environment {
        def BRANCH_NAME = "${GIT_BRANCH.replaceFirst(/^.*\//, '')}"
        def COMMIT = "${GIT_COMMIT.substring(0,8)}"
        def projectNameWithBranch = env.JOB_NAME.replace('/', '-')
        def projectFullName = env.JOB_NAME.substring(0, env.JOB_NAME.indexOf("/"));
        def projectName = projectFullName.substring(0, projectFullName.indexOf("-B"));
        sonarscanner = tool 'sonarscanner'
        dockerImage = ''
    }
    stages {
        stage("Prepare Env") {
            steps {
                cleanWs()
                script{
                    checkout scm
                    def gitrep_url = sh(returnStdout: true, script: 'git config remote.origin.url').trim()
                    echo "Application Repo: $gitrep_url"
                    echo "Git Branch Name:$BRANCH_NAME"
                    echo "Git Commit ID:$GIT_COMMIT"
                    echo "Application Name With Branch:$projectNameWithBranch"
                    echo "Application:$projectName"
                    currentBuild.displayName = "$COMMIT-${env.BUILD_NUMBER}"
				}
            }
        }
        stage("Build Gradle") {
            steps {
                echo 'Gradle Build Started'
                sh 'chmod +x ./gradlew'
                sh './gradlew clean build --no-daemon' //run a gradle task
            }
        }
        stage("Code-Analysis") {
            parallel {
                stage('Quality Gate - Sonar') {
                    steps {
                        withSonarQubeEnv('sonarqube-okd') {
                            sh """                             
                            export PATH=$sonarscanner/bin/:$PATH   
                            sonar-scanner -Dsonar.projectKey=EKS-Jenkins-$projectNameWithBranch
                            """
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            //  waitForQualityGate abortPipeline: true
                            script{
                                def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                                if (qg.status != 'OK') {
                                    // error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                    currentBuild.result='UNSTABLE'
                                }
                            }
                        }
                    }
                    post {
                        unstable {
                            echo "unstable"
                            script {
                                emailext body: "Jenkins Job: ${env.JOB_NAME} \nBuild Number: ${env.BUILD_NUMBER}\n Job Status: Unstable \n\n  For more info refer: \n Jenkins Build URL: ${env.BUILD_URL}\n SonarQube Scan Results URL: http://sonarqube.pecos-devops.cpi.cmscloud.local/dashboard?id=$JOB_NAME-$BRANCH_NAME",
                                from: 'PECOS2.0DevSecOpsCMTeam@cgifederal.com',
                                to: 'sachutun@cgifederal.com',
                                subject: "Jenkins: SonarQube Scan failed for ${env.JOB_NAME} "
                            }
                        }
                        success {
                            echo "success"
                        }
                        failure {
                            echo "failure"
                        }
                        changed {
                            echo "chnaged"
                        }
                    }
                }
                stage ('OWASP-SAST Scan') {
                    steps {
                        echo 'OWASP-SAST Dependency Check Scan completed'	  
                    } 
                }
            } 
        }
        stage('Publish JAR file to Nexus') {
            steps {
                nexusArtifactUploader artifacts: [
                    [
                        artifactId: 'pecos-json-schema',
                        classifier: '',
                        file: 'build/libs/pecos-json-schema-0.0.1-SNAPSHOT.jar',
                        type: 'jar'
                    ]
                ],
                credentialsId: 'devops-nexus-admin',
                groupId: 'gov.hhs.cms.pecos',
                nexusUrl: 'nexus.pecos-devops.cpi.cmscloud.local',
                nexusVersion: 'nexus3',
                protocol: 'http',
                repository: 'pecos-dependencies/',
                version: '0.0.1-SNAPSHOT'
            }
        }
    }
}
