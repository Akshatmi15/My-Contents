pipeline {

    agent any
    tools {
        maven 'maven_3_6_3'
        jdk 'java-11'
	}
    environment {
        def BRANCH_NAME = "${GIT_BRANCH.replaceFirst(/^.*\//, '')}"
        def COMMIT = "${GIT_COMMIT.substring(0,8)}"
        dockerImage = ''
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "nexus.pecos-devops.cpi.cmscloud.local"
        NEXUS_REPOSITORY = "maven-snapshots"
        NEXUS_CREDENTIAL_ID = "devops-nexus-admin"
    }
    stages {
        stage("Maven Build") {
            steps {
                script {
                    sh "mvn package -DskipTests=true"
                }
            }
        }
	stage("Code-Analysis") {
            parallel {
                stage('Quality Gate - Sonar') {
                    steps {
                        withSonarQubeEnv('sonarqube-okd') {
                            sh """                             
                            JAVA_HOME=/usr/java/amazoncorretto11
                            export PATH=/apps/tools/sonar-scanner-4.5.0/bin/:$PATH   
                            sonar-scanner -Dsonar.projectKey=$JOB_NAME-$BRANCH_NAME
                            """
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            //  waitForQualityGate abortPipeline: true
                            script{
                                def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                                if (qg.status != 'OK') {
                                    // error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                    currentBuild.result='UNSTABLE'
                                }
                            }
                        }
                    }
                    post {
                        unstable {
                            echo "unstable"
                            script {
                                emailext body: "Jenkins Job: ${env.JOB_NAME} \nBuild Number: ${env.BUILD_NUMBER}\n Job Status: Unstable \n\n  For more info refer: \n Jenkins Build URL: ${env.BUILD_URL}\n SonarQube Scan Results URL: http://sonarqube.pecos-devops.cpi.cmscloud.local/dashboard?id=$JOB_NAME-$BRANCH_NAME",
                                from: 'PECOS2.0DevSecOpsCMTeam@cgifederal.com',
                                to: 'PECOS2.0DevSecOpsCMTeam@cgifederal.com',
                                subject: "Jenkins: SonarQube Scan failed for ${env.JOB_NAME} "
                            }
                        }
                        success {
                            echo "success"
                        }
                        failure {
                            echo "failure"
                        }
                        changed {
                            echo "chnaged"
                        }
                    }
                }
            } 
        }
        stage("Publish JAR to Nexus") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;

                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],

                                // Lets upload the pom.xml file for additional information for Transitive dependencies
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
    }
    post { 
        always { 
            cleanWs()
        }
    }
}